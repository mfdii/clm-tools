#!/usr/bin/python

import sys, argparse
import ConfigParser

config = ConfigParser.ConfigParser()
config.read('config')

user=config.get("Basic","USERNAME").strip('"')
password=config.get("Basic","PASSWORD").strip('"')
endpoint=config.get("Basic","ENDPOINT").strip('"')
installDir=config.get("Basic","INSTALL_DIR").strip('"')


sys.path.append(str.strip(installDir,'"')+"/lib")


from clm import *

clm = CLM(user,password,endpoint)

clm.login()

if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-instances':
	results=clm.describeInstances()
	print "GUID\t\tReconID\t\tName\t\tTenant"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name'] + "\t" + clm.getTenant(serviceOffering['tenant'])['name']
	exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-images':
	results=clm.describeImages()
	print "GUID\tReconID\tName"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name']
	exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-regions':
	results=clm.describeRegions()
	print "GUID\tReconID\tName"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name']
	exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-availability-zones':
	results=clm.describeAZs()
	print "GUID\tReconID\tName"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name']
		exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-vpcs':
	results=clm.describeVPCs()
	print "GUID\tReconID\tName"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name']
	exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-describe-tenants':
	results=clm.describeTenants()
	print "GUID\tReconID\tName"
	for serviceOffering in results:
		print serviceOffering['guid'] + "\t" + serviceOffering['reconciliationID'] + "\t" + serviceOffering['name']
	exit
if len(sys.argv) > 1 and sys.argv[1] == 'clm-run-instance':
	parser = argparse.ArgumentParser(description='create a new service offering instance')
	
	parser.add_argument('-s',action="store", dest="serviceOffering")
	parser.add_argument('-t',action="store", dest="tenant", nargs='+')
	parser.add_argument('-q',action="store", dest="quantity", type=int)
	
	options=parser.parse_args(sys.argv[2:])

	print " ".join(options.tenant)


	clm.runInstance(options.serviceOffering," ".join(options.tenant),options.quantity)
	exit
